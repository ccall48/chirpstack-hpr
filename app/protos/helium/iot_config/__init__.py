# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: service/iot_config.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import helium as __helium__

if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ActionV1(betterproto.Enum):
    add = 0
    remove = 1


class ProtocolHttpRoamingV1FlowTypeV1(betterproto.Enum):
    sync = 0
    async_ = 1


class OrgCreateHeliumReqV1HeliumNetId(betterproto.Enum):
    type0_0x00003c = 0
    type3_0x60002d = 1
    type6_0xc00053 = 2


class AdminAddKeyReqV1KeyTypeV1(betterproto.Enum):
    administrator = 0
    """administrative operator key"""

    packet_router = 1
    """packet routing infrastructure key for routing streams"""

    oracle = 2
    """keys for verifying requests from other oracles"""


@dataclass(eq=False, repr=False)
class OrgV1(betterproto.Message):
    """Define an organisation"""

    oui: int = betterproto.uint64_field(1)
    owner: bytes = betterproto.bytes_field(2)
    """Org admin key"""

    payer: bytes = betterproto.bytes_field(3)
    """Key only used for DC payments"""

    delegate_keys: List[bytes] = betterproto.bytes_field(4)
    """List of keys allowed some specific actions, see services."""

    locked: bool = betterproto.bool_field(5)
    """Is org locked because of no payment"""


@dataclass(eq=False, repr=False)
class DevaddrRangeV1(betterproto.Message):
    """Device address range, ex: 16#00000001 to 16#0000000A"""

    route_id: str = betterproto.string_field(1)
    start_addr: int = betterproto.uint32_field(2)
    end_addr: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DevaddrConstraintV1(betterproto.Message):
    start_addr: int = betterproto.uint32_field(1)
    end_addr: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EuiPairV1(betterproto.Message):
    """Device App EUI and Dev EUI"""

    route_id: str = betterproto.string_field(1)
    app_eui: int = betterproto.uint64_field(2)
    dev_eui: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ProtocolPacketRouterV1(betterproto.Message):
    """Packet Router protocol options (empty for now)"""

    pass


@dataclass(eq=False, repr=False)
class ProtocolGwmpMappingV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    port: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ProtocolGwmpV1(betterproto.Message):
    """
    GWMP protocol options (region to port mapping, see https://github.com/Lora-
    net/packet_forwarder/blob/master/PROTOCOL.TXT)
    """

    mapping: List["ProtocolGwmpMappingV1"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ProtocolHttpRoamingV1(betterproto.Message):
    """HTTP Roaming protocol options"""

    flow_type: "ProtocolHttpRoamingV1FlowTypeV1" = betterproto.enum_field(1)
    dedupe_timeout: int = betterproto.uint32_field(2)
    """milliseconds"""

    path: str = betterproto.string_field(3)
    """path component of URL of roaming partner"""

    auth_header: str = betterproto.string_field(4)
    """Authorization Header"""

    receiver_nsid: str = betterproto.string_field(5)
    """Receiver NSID"""


@dataclass(eq=False, repr=False)
class ServerV1(betterproto.Message):
    """Server Route definition"""

    host: str = betterproto.string_field(1)
    """LNS address, ex: endpoint.test.com"""

    port: int = betterproto.uint32_field(2)
    """LNS port, ex: 8080"""

    packet_router: "ProtocolPacketRouterV1" = betterproto.message_field(
        3, group="protocol"
    )
    gwmp: "ProtocolGwmpV1" = betterproto.message_field(4, group="protocol")
    http_roaming: "ProtocolHttpRoamingV1" = betterproto.message_field(
        5, group="protocol"
    )


@dataclass(eq=False, repr=False)
class RouteV1(betterproto.Message):
    """Route definition"""

    id: str = betterproto.string_field(1)
    """UUID"""

    net_id: int = betterproto.uint32_field(2)
    """LoraWan Network ID"""

    oui: int = betterproto.uint64_field(3)
    """Organization Unique ID"""

    server: "ServerV1" = betterproto.message_field(4)
    max_copies: int = betterproto.uint32_field(5)
    """Number of packet copies bought by this route"""

    active: bool = betterproto.bool_field(6)
    locked: bool = betterproto.bool_field(7)
    """Is route locked because of no payment"""

    ignore_empty_skf: bool = betterproto.bool_field(8)
    """
    If true, routes are blocked whose devaddrs have empty session key filters
    """


@dataclass(eq=False, repr=False)
class OrgListReqV1(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class OrgListResV1(betterproto.Message):
    orgs: List["OrgV1"] = betterproto.message_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class OrgGetReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class OrgCreateHeliumReqV1(betterproto.Message):
    owner: bytes = betterproto.bytes_field(1)
    payer: bytes = betterproto.bytes_field(2)
    devaddrs: int = betterproto.uint64_field(3)
    """Number of device address needed Even number required, minimum of 8"""

    timestamp: int = betterproto.uint64_field(4)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(5)
    delegate_keys: List[bytes] = betterproto.bytes_field(6)
    signer: bytes = betterproto.bytes_field(7)
    """pubkey binary of the signing keypair"""

    net_id: "OrgCreateHeliumReqV1HeliumNetId" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class OrgCreateRoamerReqV1(betterproto.Message):
    owner: bytes = betterproto.bytes_field(1)
    payer: bytes = betterproto.bytes_field(2)
    net_id: int = betterproto.uint32_field(3)
    timestamp: int = betterproto.uint64_field(4)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(5)
    delegate_keys: List[bytes] = betterproto.bytes_field(6)
    signer: bytes = betterproto.bytes_field(7)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class OrgUpdateReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    updates: List["OrgUpdateReqV1DelegateKeyUpdateV1"] = betterproto.message_field(2)
    timestamp: int = betterproto.uint64_field(3)
    signer: bytes = betterproto.bytes_field(4)
    signature: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class OrgUpdateReqV1DelegateKeyUpdateV1(betterproto.Message):
    delegate_key: bytes = betterproto.bytes_field(1)
    action: "ActionV1" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class OrgUpdateReqV1DevaddrConstraintUpdateV1(betterproto.Message):
    constraint: "DevaddrConstraintV1" = betterproto.message_field(1)
    action: "ActionV1" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class OrgUpdateReqV1UpdateV1(betterproto.Message):
    owner: bytes = betterproto.bytes_field(1, group="update")
    payer: bytes = betterproto.bytes_field(2, group="update")
    delegate_key: "OrgUpdateReqV1DelegateKeyUpdateV1" = betterproto.message_field(
        3, group="update"
    )
    devaddrs: int = betterproto.uint64_field(4, group="update")
    """count of devaddrs to add, in even numbers"""

    constraint: "OrgUpdateReqV1DevaddrConstraintUpdateV1" = (
        betterproto.message_field(5, group="update")
    )
    """devaddr constraints to explicitly add or remove"""


@dataclass(eq=False, repr=False)
class OrgResV1(betterproto.Message):
    org: "OrgV1" = betterproto.message_field(1)
    net_id: int = betterproto.uint32_field(2)
    devaddr_constraints: List["DevaddrConstraintV1"] = betterproto.message_field(3)
    timestamp: int = betterproto.uint64_field(4)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(6)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class OrgDisableReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class OrgDisableResV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class OrgEnableReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class OrgEnableResV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class RouteListReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteListResV1(betterproto.Message):
    routes: List["RouteV1"] = betterproto.message_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class RouteGetReqV1(betterproto.Message):
    id: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteCreateReqV1(betterproto.Message):
    oui: int = betterproto.uint64_field(1)
    route: "RouteV1" = betterproto.message_field(2)
    timestamp: int = betterproto.uint64_field(3)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteUpdateReqV1(betterproto.Message):
    route: "RouteV1" = betterproto.message_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteDeleteReqV1(betterproto.Message):
    id: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteResV1(betterproto.Message):
    route: "RouteV1" = betterproto.message_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class RouteGetEuisReqV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteUpdateEuisReqV1(betterproto.Message):
    action: "ActionV1" = betterproto.enum_field(1)
    eui_pair: "EuiPairV1" = betterproto.message_field(2)
    timestamp: int = betterproto.uint64_field(3)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteEuisResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class RouteGetDevaddrRangesReqV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteUpdateDevaddrRangesReqV1(betterproto.Message):
    action: "ActionV1" = betterproto.enum_field(1)
    devaddr_range: "DevaddrRangeV1" = betterproto.message_field(2)
    timestamp: int = betterproto.uint64_field(3)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteDevaddrRangesResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class RouteStreamReqV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(2)
    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteStreamResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""

    action: "ActionV1" = betterproto.enum_field(4)
    route: "RouteV1" = betterproto.message_field(5, group="data")
    eui_pair: "EuiPairV1" = betterproto.message_field(6, group="data")
    devaddr_range: "DevaddrRangeV1" = betterproto.message_field(7, group="data")
    skf: "SkfV1" = betterproto.message_field(8, group="data")


@dataclass(eq=False, repr=False)
class SkfV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    devaddr: int = betterproto.uint32_field(2)
    session_key: str = betterproto.string_field(3)
    """the hex-encoded string of the binary session key"""

    max_copies: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RouteSkfListReqV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(3)
    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteSkfGetReqV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    devaddr: int = betterproto.uint32_field(2)
    timestamp: int = betterproto.uint64_field(3)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteSkfUpdateReqV1(betterproto.Message):
    route_id: str = betterproto.string_field(1)
    updates: List[
        "RouteSkfUpdateReqV1RouteSkfUpdateV1"
    ] = betterproto.message_field(2)
    """WARNING: this will limited to 100 updates per req"""

    timestamp: int = betterproto.uint64_field(3)
    """in milliseconds since unix epoch"""

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RouteSkfUpdateReqV1RouteSkfUpdateV1(betterproto.Message):
    devaddr: int = betterproto.uint32_field(1)
    session_key: str = betterproto.string_field(2)
    """the hex-encoded string of the binary session key"""

    action: "ActionV1" = betterproto.enum_field(3)
    max_copies: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RouteSkfUpdateResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class GatewayRegionParamsReqV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    address: bytes = betterproto.bytes_field(2)
    signature: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class GatewayRegionParamsResV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    params: "__helium__.BlockchainRegionParamsV1" = betterproto.message_field(2)
    gain: int = betterproto.uint64_field(3)
    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""

    timestamp: int = betterproto.uint64_field(5)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(6)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class GatewayLocationReqV1(betterproto.Message):
    gateway: bytes = betterproto.bytes_field(1)
    signature: bytes = betterproto.bytes_field(2)
    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class GatewayLocationResV1(betterproto.Message):
    location: str = betterproto.string_field(1)
    timestamp: int = betterproto.uint64_field(2)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(4)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class AdminLoadRegionReqV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    params: "__helium__.BlockchainRegionParamsV1" = betterproto.message_field(2)
    hex_indexes: bytes = betterproto.bytes_field(3)
    """
    Gzip-compressed file content from converting region geojson to a list of h3
    indexes
    """

    signature: bytes = betterproto.bytes_field(4)
    signer: bytes = betterproto.bytes_field(5)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class AdminLoadRegionResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class AdminAddKeyReqV1(betterproto.Message):
    pubkey: bytes = betterproto.bytes_field(1)
    key_type: "AdminAddKeyReqKeyTypeV1" = betterproto.enum_field(2)
    signature: bytes = betterproto.bytes_field(3)
    """
    Signature of the request message signed by an admin key already registered
    to the config service
    """

    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class AdminRemoveKeyReqV1(betterproto.Message):
    pubkey: bytes = betterproto.bytes_field(1)
    signature: bytes = betterproto.bytes_field(2)
    """
    Signature of the request message signed by an admin key already registered
    to the config service
    """

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class AdminKeyResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """in seconds since unix epoch"""

    signer: bytes = betterproto.bytes_field(2)
    """pubkey binary of the signing keypair"""

    signature: bytes = betterproto.bytes_field(3)
    """Signature over the response by the config service"""


@dataclass(eq=False, repr=False)
class GatewayMetadata(betterproto.Message):
    location: str = betterproto.string_field(1)
    """/ The asserted h3 location of the gateway"""

    region: "__helium__.Region" = betterproto.enum_field(2)
    """/ LoRa region derived from the asserted location"""

    gain: int = betterproto.int32_field(3)
    """
    / the transmit gain value of the gateway in dbi x 10/ For example 1 dbi =
    10, 15 dbi = 150
    """

    elevation: int = betterproto.int32_field(4)
    """/ The asserted elevation of the gateway"""


@dataclass(eq=False, repr=False)
class GatewayInfo(betterproto.Message):
    address: bytes = betterproto.bytes_field(1)
    """The public key binary address and on-chain identity of the gateway"""

    is_full_hotspot: bool = betterproto.bool_field(2)
    """
    Whether or not the hotspot participates in PoC or only transfers data
    """

    metadata: "GatewayMetadata" = betterproto.message_field(3)
    """The gateway's metadata as recorded on the blockchain"""


@dataclass(eq=False, repr=False)
class GatewayInfoReqV1(betterproto.Message):
    """/ Look up the details of a given hotspot public key"""

    address: bytes = betterproto.bytes_field(1)
    """/ The pubkey_bin address of the gateway to look up"""

    signature: bytes = betterproto.bytes_field(2)
    """/ sig from a key known to the config service"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class GatewayInfoResV1(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    """/ Timestamp of response in seconds since unix epoch"""

    info: "GatewayInfo" = betterproto.message_field(2)
    signature: bytes = betterproto.bytes_field(3)
    """/ sig from the config service"""

    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class GatewayInfoStreamReqV1(betterproto.Message):
    """/ Request a stream of all active gateways"""

    batch_size: int = betterproto.uint32_field(1)
    signature: bytes = betterproto.bytes_field(2)
    """/ sig from a key known to the config service"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class GatewayInfoStreamResV1(betterproto.Message):
    """
    / Active gateway info streaming response containing a batch of gateways
    """

    timestamp: int = betterproto.uint64_field(1)
    """/ Timestamp of response in seconds since unix epoch"""

    gateways: List["GatewayInfo"] = betterproto.message_field(2)
    """/ batch of gateways"""

    signature: bytes = betterproto.bytes_field(3)
    """/ sig from the config service"""

    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RegionParamsReqV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    signature: bytes = betterproto.bytes_field(2)
    """/ sig from a key known to the config service"""

    signer: bytes = betterproto.bytes_field(3)
    """pubkey binary of the signing keypair"""


@dataclass(eq=False, repr=False)
class RegionParamsResV1(betterproto.Message):
    region: "__helium__.Region" = betterproto.enum_field(1)
    params: "__helium__.BlockchainRegionParamsV1" = betterproto.message_field(2)
    signature: bytes = betterproto.bytes_field(3)
    """/ sig from the config service"""

    signer: bytes = betterproto.bytes_field(4)
    """pubkey binary of the signing keypair"""

    timestamp: int = betterproto.uint64_field(5)
    """in seconds since unix epoch"""


class OrgStub(betterproto.ServiceStub):
    async def list(
        self,
        org_list_req_v1: "OrgListReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgListResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/list",
            org_list_req_v1,
            OrgListResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get(
        self,
        org_get_req_v1: "OrgGetReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/get",
            org_get_req_v1,
            OrgResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_helium(
        self,
        org_create_helium_req_v1: "OrgCreateHeliumReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/create_helium",
            org_create_helium_req_v1,
            OrgResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_roamer(
        self,
        org_create_roamer_req_v1: "OrgCreateRoamerReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/create_roamer",
            org_create_roamer_req_v1,
            OrgResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update(
        self,
        org_update_req_v1: "OrgUpdateReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/update",
            org_update_req_v1,
            OrgResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable(
        self,
        org_disable_req_v1: "OrgDisableReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgDisableResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/disable",
            org_disable_req_v1,
            OrgDisableResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable(
        self,
        org_enable_req_v1: "OrgEnableReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrgEnableResV1":
        return await self._unary_unary(
            "/helium.iot_config.org/enable",
            org_enable_req_v1,
            OrgEnableResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class RouteStub(betterproto.ServiceStub):
    async def list(
        self,
        route_list_req_v1: "RouteListReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteListResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/list",
            route_list_req_v1,
            RouteListResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get(
        self,
        route_get_req_v1: "RouteGetReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/get",
            route_get_req_v1,
            RouteResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create(
        self,
        route_create_req_v1: "RouteCreateReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/create",
            route_create_req_v1,
            RouteResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update(
        self,
        route_update_req_v1: "RouteUpdateReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/update",
            route_update_req_v1,
            RouteResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete(
        self,
        route_delete_req_v1: "RouteDeleteReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/delete",
            route_delete_req_v1,
            RouteResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream(
        self,
        route_stream_req_v1: "RouteStreamReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["RouteStreamResV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.route/stream",
            route_stream_req_v1,
            RouteStreamResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_euis(
        self,
        route_get_euis_req_v1: "RouteGetEuisReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EuiPairV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.route/get_euis",
            route_get_euis_req_v1,
            EuiPairV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def update_euis(
        self,
        route_update_euis_req_v1_iterator: Union[
            AsyncIterable["RouteUpdateEuisReqV1"], Iterable["RouteUpdateEuisReqV1"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteEuisResV1":
        return await self._stream_unary(
            "/helium.iot_config.route/update_euis",
            route_update_euis_req_v1_iterator,
            RouteUpdateEuisReqV1,
            RouteEuisResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_devaddr_ranges(
        self,
        route_get_devaddr_ranges_req_v1: "RouteGetDevaddrRangesReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["DevaddrRangeV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.route/get_devaddr_ranges",
            route_get_devaddr_ranges_req_v1,
            DevaddrRangeV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def update_devaddr_ranges(
        self,
        route_update_devaddr_ranges_req_v1_iterator: Union[
            AsyncIterable["RouteUpdateDevaddrRangesReqV1"],
            Iterable["RouteUpdateDevaddrRangesReqV1"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteDevaddrRangesResV1":
        return await self._stream_unary(
            "/helium.iot_config.route/update_devaddr_ranges",
            route_update_devaddr_ranges_req_v1_iterator,
            RouteUpdateDevaddrRangesReqV1,
            RouteDevaddrRangesResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_skfs(
        self,
        route_skf_list_req_v1: "RouteSkfListReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SkfV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.route/list_skfs",
            route_skf_list_req_v1,
            SkfV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_skfs(
        self,
        route_skf_get_req_v1: "RouteSkfGetReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SkfV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.route/get_skfs",
            route_skf_get_req_v1,
            SkfV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def update_skfs(
        self,
        route_skf_update_req_v1: "RouteSkfUpdateReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RouteSkfUpdateResV1":
        return await self._unary_unary(
            "/helium.iot_config.route/update_skfs",
            route_skf_update_req_v1,
            RouteSkfUpdateResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class GatewayStub(betterproto.ServiceStub):
    async def region_params(
        self,
        gateway_region_params_req_v1: "GatewayRegionParamsReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GatewayRegionParamsResV1":
        return await self._unary_unary(
            "/helium.iot_config.gateway/region_params",
            gateway_region_params_req_v1,
            GatewayRegionParamsResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def location(
        self,
        gateway_location_req_v1: "GatewayLocationReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GatewayLocationResV1":
        return await self._unary_unary(
            "/helium.iot_config.gateway/location",
            gateway_location_req_v1,
            GatewayLocationResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def info(
        self,
        gateway_info_req_v1: "GatewayInfoReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GatewayInfoResV1":
        return await self._unary_unary(
            "/helium.iot_config.gateway/info",
            gateway_info_req_v1,
            GatewayInfoResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def info_stream(
        self,
        gateway_info_stream_req_v1: "GatewayInfoStreamReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GatewayInfoStreamResV1"]:
        async for response in self._unary_stream(
            "/helium.iot_config.gateway/info_stream",
            gateway_info_stream_req_v1,
            GatewayInfoStreamResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class AdminStub(betterproto.ServiceStub):
    async def add_key(
        self,
        admin_add_key_req_v1: "AdminAddKeyReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AdminKeyResV1":
        return await self._unary_unary(
            "/helium.iot_config.admin/add_key",
            admin_add_key_req_v1,
            AdminKeyResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_key(
        self,
        admin_remove_key_req_v1: "AdminRemoveKeyReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AdminKeyResV1":
        return await self._unary_unary(
            "/helium.iot_config.admin/remove_key",
            admin_remove_key_req_v1,
            AdminKeyResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def load_region(
        self,
        admin_load_region_req_v1: "AdminLoadRegionReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AdminLoadRegionResV1":
        return await self._unary_unary(
            "/helium.iot_config.admin/load_region",
            admin_load_region_req_v1,
            AdminLoadRegionResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def region_params(
        self,
        region_params_req_v1: "RegionParamsReqV1",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegionParamsResV1":
        return await self._unary_unary(
            "/helium.iot_config.admin/region_params",
            region_params_req_v1,
            RegionParamsResV1,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class OrgBase(ServiceBase):
    async def list(self, org_list_req_v1: "OrgListReqV1") -> "OrgListResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(self, org_get_req_v1: "OrgGetReqV1") -> "OrgResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_helium(
        self, org_create_helium_req_v1: "OrgCreateHeliumReqV1"
    ) -> "OrgResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_roamer(
        self, org_create_roamer_req_v1: "OrgCreateRoamerReqV1"
    ) -> "OrgResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update(self, org_update_req_v1: "OrgUpdateReqV1") -> "OrgResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disable(self, org_disable_req_v1: "OrgDisableReqV1") -> "OrgDisableResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enable(self, org_enable_req_v1: "OrgEnableReqV1") -> "OrgEnableResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list(
        self, stream: "grpclib.server.Stream[OrgListReqV1, OrgListResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list(request)
        await stream.send_message(response)

    async def __rpc_get(
        self, stream: "grpclib.server.Stream[OrgGetReqV1, OrgResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    async def __rpc_create_helium(
        self, stream: "grpclib.server.Stream[OrgCreateHeliumReqV1, OrgResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_helium(request)
        await stream.send_message(response)

    async def __rpc_create_roamer(
        self, stream: "grpclib.server.Stream[OrgCreateRoamerReqV1, OrgResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_roamer(request)
        await stream.send_message(response)

    async def __rpc_update(
        self, stream: "grpclib.server.Stream[OrgUpdateReqV1, OrgResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update(request)
        await stream.send_message(response)

    async def __rpc_disable(
        self, stream: "grpclib.server.Stream[OrgDisableReqV1, OrgDisableResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.disable(request)
        await stream.send_message(response)

    async def __rpc_enable(
        self, stream: "grpclib.server.Stream[OrgEnableReqV1, OrgEnableResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.enable(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helium.iot_config.org/list": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgListReqV1,
                OrgListResV1,
            ),
            "/helium.iot_config.org/get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgGetReqV1,
                OrgResV1,
            ),
            "/helium.iot_config.org/create_helium": grpclib.const.Handler(
                self.__rpc_create_helium,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgCreateHeliumReqV1,
                OrgResV1,
            ),
            "/helium.iot_config.org/create_roamer": grpclib.const.Handler(
                self.__rpc_create_roamer,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgCreateRoamerReqV1,
                OrgResV1,
            ),
            "/helium.iot_config.org/update": grpclib.const.Handler(
                self.__rpc_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgUpdateReqV1,
                OrgResV1,
            ),
            "/helium.iot_config.org/disable": grpclib.const.Handler(
                self.__rpc_disable,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgDisableReqV1,
                OrgDisableResV1,
            ),
            "/helium.iot_config.org/enable": grpclib.const.Handler(
                self.__rpc_enable,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrgEnableReqV1,
                OrgEnableResV1,
            ),
        }


class RouteBase(ServiceBase):
    async def list(self, route_list_req_v1: "RouteListReqV1") -> "RouteListResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(self, route_get_req_v1: "RouteGetReqV1") -> "RouteResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create(self, route_create_req_v1: "RouteCreateReqV1") -> "RouteResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update(self, route_update_req_v1: "RouteUpdateReqV1") -> "RouteResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(self, route_delete_req_v1: "RouteDeleteReqV1") -> "RouteResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream(
        self, route_stream_req_v1: "RouteStreamReqV1"
    ) -> AsyncIterator["RouteStreamResV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield RouteStreamResV1()

    async def get_euis(
        self, route_get_euis_req_v1: "RouteGetEuisReqV1"
    ) -> AsyncIterator["EuiPairV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EuiPairV1()

    async def update_euis(
        self, route_update_euis_req_v1_iterator: AsyncIterator["RouteUpdateEuisReqV1"]
    ) -> "RouteEuisResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_devaddr_ranges(
        self, route_get_devaddr_ranges_req_v1: "RouteGetDevaddrRangesReqV1"
    ) -> AsyncIterator["DevaddrRangeV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DevaddrRangeV1()

    async def update_devaddr_ranges(
        self,
        route_update_devaddr_ranges_req_v1_iterator: AsyncIterator[
            "RouteUpdateDevaddrRangesReqV1"
        ],
    ) -> "RouteDevaddrRangesResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_skfs(
        self, route_skf_list_req_v1: "RouteSkfListReqV1"
    ) -> AsyncIterator["SkfV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SkfV1()

    async def get_skfs(
        self, route_skf_get_req_v1: "RouteSkfGetReqV1"
    ) -> AsyncIterator["SkfV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SkfV1()

    async def update_skfs(
        self, route_skf_update_req_v1: "RouteSkfUpdateReqV1"
    ) -> "RouteSkfUpdateResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list(
        self, stream: "grpclib.server.Stream[RouteListReqV1, RouteListResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list(request)
        await stream.send_message(response)

    async def __rpc_get(
        self, stream: "grpclib.server.Stream[RouteGetReqV1, RouteResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    async def __rpc_create(
        self, stream: "grpclib.server.Stream[RouteCreateReqV1, RouteResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create(request)
        await stream.send_message(response)

    async def __rpc_update(
        self, stream: "grpclib.server.Stream[RouteUpdateReqV1, RouteResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update(request)
        await stream.send_message(response)

    async def __rpc_delete(
        self, stream: "grpclib.server.Stream[RouteDeleteReqV1, RouteResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    async def __rpc_stream(
        self, stream: "grpclib.server.Stream[RouteStreamReqV1, RouteStreamResV1]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream,
            stream,
            request,
        )

    async def __rpc_get_euis(
        self, stream: "grpclib.server.Stream[RouteGetEuisReqV1, EuiPairV1]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_euis,
            stream,
            request,
        )

    async def __rpc_update_euis(
        self, stream: "grpclib.server.Stream[RouteUpdateEuisReqV1, RouteEuisResV1]"
    ) -> None:
        request = stream.__aiter__()
        response = await self.update_euis(request)
        await stream.send_message(response)

    async def __rpc_get_devaddr_ranges(
        self,
        stream: "grpclib.server.Stream[RouteGetDevaddrRangesReqV1, DevaddrRangeV1]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_devaddr_ranges,
            stream,
            request,
        )

    async def __rpc_update_devaddr_ranges(
        self,
        stream: "grpclib.server.Stream[RouteUpdateDevaddrRangesReqV1, RouteDevaddrRangesResV1]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.update_devaddr_ranges(request)
        await stream.send_message(response)

    async def __rpc_list_skfs(
        self, stream: "grpclib.server.Stream[RouteSkfListReqV1, SkfV1]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.list_skfs,
            stream,
            request,
        )

    async def __rpc_get_skfs(
        self, stream: "grpclib.server.Stream[RouteSkfGetReqV1, SkfV1]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_skfs,
            stream,
            request,
        )

    async def __rpc_update_skfs(
        self, stream: "grpclib.server.Stream[RouteSkfUpdateReqV1, RouteSkfUpdateResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_skfs(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helium.iot_config.route/list": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteListReqV1,
                RouteListResV1,
            ),
            "/helium.iot_config.route/get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteGetReqV1,
                RouteResV1,
            ),
            "/helium.iot_config.route/create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteCreateReqV1,
                RouteResV1,
            ),
            "/helium.iot_config.route/update": grpclib.const.Handler(
                self.__rpc_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteUpdateReqV1,
                RouteResV1,
            ),
            "/helium.iot_config.route/delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteDeleteReqV1,
                RouteResV1,
            ),
            "/helium.iot_config.route/stream": grpclib.const.Handler(
                self.__rpc_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                RouteStreamReqV1,
                RouteStreamResV1,
            ),
            "/helium.iot_config.route/get_euis": grpclib.const.Handler(
                self.__rpc_get_euis,
                grpclib.const.Cardinality.UNARY_STREAM,
                RouteGetEuisReqV1,
                EuiPairV1,
            ),
            "/helium.iot_config.route/update_euis": grpclib.const.Handler(
                self.__rpc_update_euis,
                grpclib.const.Cardinality.STREAM_UNARY,
                RouteUpdateEuisReqV1,
                RouteEuisResV1,
            ),
            "/helium.iot_config.route/get_devaddr_ranges": grpclib.const.Handler(
                self.__rpc_get_devaddr_ranges,
                grpclib.const.Cardinality.UNARY_STREAM,
                RouteGetDevaddrRangesReqV1,
                DevaddrRangeV1,
            ),
            "/helium.iot_config.route/update_devaddr_ranges": grpclib.const.Handler(
                self.__rpc_update_devaddr_ranges,
                grpclib.const.Cardinality.STREAM_UNARY,
                RouteUpdateDevaddrRangesReqV1,
                RouteDevaddrRangesResV1,
            ),
            "/helium.iot_config.route/list_skfs": grpclib.const.Handler(
                self.__rpc_list_skfs,
                grpclib.const.Cardinality.UNARY_STREAM,
                RouteSkfListReqV1,
                SkfV1,
            ),
            "/helium.iot_config.route/get_skfs": grpclib.const.Handler(
                self.__rpc_get_skfs,
                grpclib.const.Cardinality.UNARY_STREAM,
                RouteSkfGetReqV1,
                SkfV1,
            ),
            "/helium.iot_config.route/update_skfs": grpclib.const.Handler(
                self.__rpc_update_skfs,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteSkfUpdateReqV1,
                RouteSkfUpdateResV1,
            ),
        }


class GatewayBase(ServiceBase):
    async def region_params(
        self, gateway_region_params_req_v1: "GatewayRegionParamsReqV1"
    ) -> "GatewayRegionParamsResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def location(
        self, gateway_location_req_v1: "GatewayLocationReqV1"
    ) -> "GatewayLocationResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def info(self, gateway_info_req_v1: "GatewayInfoReqV1") -> "GatewayInfoResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def info_stream(
        self, gateway_info_stream_req_v1: "GatewayInfoStreamReqV1"
    ) -> AsyncIterator["GatewayInfoStreamResV1"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GatewayInfoStreamResV1()

    async def __rpc_region_params(
        self,
        stream: "grpclib.server.Stream[GatewayRegionParamsReqV1, GatewayRegionParamsResV1]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.region_params(request)
        await stream.send_message(response)

    async def __rpc_location(
        self,
        stream: "grpclib.server.Stream[GatewayLocationReqV1, GatewayLocationResV1]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.location(request)
        await stream.send_message(response)

    async def __rpc_info(
        self, stream: "grpclib.server.Stream[GatewayInfoReqV1, GatewayInfoResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.info(request)
        await stream.send_message(response)

    async def __rpc_info_stream(
        self,
        stream: "grpclib.server.Stream[GatewayInfoStreamReqV1, GatewayInfoStreamResV1]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.info_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helium.iot_config.gateway/region_params": grpclib.const.Handler(
                self.__rpc_region_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                GatewayRegionParamsReqV1,
                GatewayRegionParamsResV1,
            ),
            "/helium.iot_config.gateway/location": grpclib.const.Handler(
                self.__rpc_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                GatewayLocationReqV1,
                GatewayLocationResV1,
            ),
            "/helium.iot_config.gateway/info": grpclib.const.Handler(
                self.__rpc_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GatewayInfoReqV1,
                GatewayInfoResV1,
            ),
            "/helium.iot_config.gateway/info_stream": grpclib.const.Handler(
                self.__rpc_info_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GatewayInfoStreamReqV1,
                GatewayInfoStreamResV1,
            ),
        }


class AdminBase(ServiceBase):
    async def add_key(
        self, admin_add_key_req_v1: "AdminAddKeyReqV1"
    ) -> "AdminKeyResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_key(
        self, admin_remove_key_req_v1: "AdminRemoveKeyReqV1"
    ) -> "AdminKeyResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def load_region(
        self, admin_load_region_req_v1: "AdminLoadRegionReqV1"
    ) -> "AdminLoadRegionResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def region_params(
        self, region_params_req_v1: "RegionParamsReqV1"
    ) -> "RegionParamsResV1":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_key(
        self, stream: "grpclib.server.Stream[AdminAddKeyReqV1, AdminKeyResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_key(request)
        await stream.send_message(response)

    async def __rpc_remove_key(
        self, stream: "grpclib.server.Stream[AdminRemoveKeyReqV1, AdminKeyResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_key(request)
        await stream.send_message(response)

    async def __rpc_load_region(
        self,
        stream: "grpclib.server.Stream[AdminLoadRegionReqV1, AdminLoadRegionResV1]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.load_region(request)
        await stream.send_message(response)

    async def __rpc_region_params(
        self, stream: "grpclib.server.Stream[RegionParamsReqV1, RegionParamsResV1]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.region_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helium.iot_config.admin/add_key": grpclib.const.Handler(
                self.__rpc_add_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                AdminAddKeyReqV1,
                AdminKeyResV1,
            ),
            "/helium.iot_config.admin/remove_key": grpclib.const.Handler(
                self.__rpc_remove_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                AdminRemoveKeyReqV1,
                AdminKeyResV1,
            ),
            "/helium.iot_config.admin/load_region": grpclib.const.Handler(
                self.__rpc_load_region,
                grpclib.const.Cardinality.UNARY_UNARY,
                AdminLoadRegionReqV1,
                AdminLoadRegionResV1,
            ),
            "/helium.iot_config.admin/region_params": grpclib.const.Handler(
                self.__rpc_region_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegionParamsReqV1,
                RegionParamsResV1,
            ),
        }
